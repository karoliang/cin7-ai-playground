openapi: 3.0.3
info:
  title: CIN7 AI Playground API
  description: |
    Comprehensive API for CIN7 AI Playground v2.0 - AI-powered multi-page application builder.

    This API provides endpoints for:
    - Project management and file operations
    - AI-powered code generation and chat functionality
    - User management and authentication
    - Template management and build system integration

    ## Authentication

    The API uses Supabase authentication. Include the JWT token in the Authorization header:
    ```
    Authorization: Bearer <your-jwt-token>
    ```

    ## Rate Limiting

    API requests are rate-limited to prevent abuse:
    - 100 requests per minute for authenticated users
    - 10 requests per minute for AI endpoints
    - 1000 requests per minute for file operations

    ## API Versioning

    This API supports versioning via the URL path. Current version: v1

    ## Error Handling

    All errors follow a consistent format:
    ```json
    {
      "success": false,
      "error": "Error message",
      "code": "ERROR_CODE",
      "details": {}
    }
    ```
  version: 2.0.0
  contact:
    name: CIN7 AI Playground Support
    url: https://github.com/karoliang/cin7-ai-playground/issues
  license:
    name: ISC
    url: https://opensource.org/licenses/ISC

servers:
  - url: https://api.cin7-ai-playground.com/v1
    description: Production server
  - url: https://staging-api.cin7-ai-playground.com/v1
    description: Staging server
  - url: http://localhost:3000/api/v1
    description: Development server

tags:
  - name: Projects
    description: Project management operations
  - name: AI
    description: AI-powered code generation and chat
  - name: Files
    description: File management operations
  - name: Users
    description: User management and profile operations
  - name: Templates
    description: Template management operations
  - name: Build
    description: Build system operations
  - name: Import/Export
    description: Project import and export operations

paths:
  # Project Management Endpoints
  /projects:
    get:
      tags:
        - Projects
      summary: List all projects
      description: Retrieve a paginated list of projects for the authenticated user
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
            minimum: 1
          description: Page number for pagination
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
          description: Number of items per page
        - name: status
          in: query
          schema:
            type: string
            enum: [draft, active, archived, deleted, building, deployed, error]
          description: Filter by project status
        - name: search
          in: query
          schema:
            type: string
          description: Search term for project names and descriptions
        - name: sort
          in: query
          schema:
            type: string
            enum: [created_at, updated_at, name]
            default: updated_at
          description: Sort field
        - name: order
          in: query
          schema:
            type: string
            enum: [asc, desc]
            default: desc
          description: Sort order
      responses:
        '200':
          description: Successfully retrieved projects
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      projects:
                        type: array
                        items:
                          $ref: '#/components/schemas/Project'
                      pagination:
                        $ref: '#/components/schemas/Pagination'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/RateLimited'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      tags:
        - Projects
      summary: Create a new project
      description: Create a new project with the specified configuration
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProjectRequest'
      responses:
        '201':
          description: Successfully created project
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Project'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '422':
          $ref: '#/components/responses/ValidationError'
        '429':
          $ref: '#/components/responses/RateLimited'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /projects/{projectId}:
    get:
      tags:
        - Projects
      summary: Get project details
      description: Retrieve detailed information about a specific project
      security:
        - bearerAuth: []
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Project ID
      responses:
        '200':
          description: Successfully retrieved project
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Project'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    put:
      tags:
        - Projects
      summary: Update project
      description: Update project details and settings
      security:
        - bearerAuth: []
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Project ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProjectRequest'
      responses:
        '200':
          description: Successfully updated project
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Project'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/ValidationError'
        '429':
          $ref: '#/components/responses/RateLimited'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      tags:
        - Projects
      summary: Delete project
      description: Delete a project and all associated files
      security:
        - bearerAuth: []
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Project ID
      responses:
        '200':
          description: Successfully deleted project
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Project deleted successfully"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # AI Integration Endpoints
  /ai/generate:
    post:
      tags:
        - AI
      summary: Generate code with AI
      description: Generate code based on a prompt using AI models
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenerateRequest'
      responses:
        '200':
          description: Successfully generated code
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/GenerateResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/RateLimited'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /ai/chat:
    post:
      tags:
        - AI
      summary: Chat with AI assistant
      description: Send a message to the AI assistant and receive a response
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatRequest'
      responses:
        '200':
          description: Successfully received AI response
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/ChatResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/RateLimited'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /ai/models:
    get:
      tags:
        - AI
      summary: List available AI models
      description: Retrieve a list of available AI models and their capabilities
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successfully retrieved AI models
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AIModel'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /ai/analyze:
    post:
      tags:
        - AI
      summary: Analyze code with AI
      description: Analyze code for issues, improvements, and suggestions
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnalyzeRequest'
      responses:
        '200':
          description: Successfully analyzed code
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/AnalyzeResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/RateLimited'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # File Management Endpoints
  /projects/{projectId}/files:
    get:
      tags:
        - Files
      summary: List project files
      description: Retrieve a list of all files in a project
      security:
        - bearerAuth: []
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Project ID
        - name: type
          in: query
          schema:
            type: string
            enum: [html, css, javascript, typescript, jsx, tsx, json, md, txt, image, other]
          description: Filter by file type
      responses:
        '200':
          description: Successfully retrieved files
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ProjectFile'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      tags:
        - Files
      summary: Create file
      description: Create a new file in the project
      security:
        - bearerAuth: []
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Project ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateFileRequest'
      responses:
        '201':
          description: Successfully created file
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/ProjectFile'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/ValidationError'
        '429':
          $ref: '#/components/responses/RateLimited'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /projects/{projectId}/files/{fileId}:
    get:
      tags:
        - Files
      summary: Get file content
      description: Retrieve the content of a specific file
      security:
        - bearerAuth: []
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Project ID
        - name: fileId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: File ID
      responses:
        '200':
          description: Successfully retrieved file
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/ProjectFile'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    put:
      tags:
        - Files
      summary: Update file
      description: Update the content of a file
      security:
        - bearerAuth: []
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Project ID
        - name: fileId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: File ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateFileRequest'
      responses:
        '200':
          description: Successfully updated file
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/ProjectFile'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/ValidationError'
        '429':
          $ref: '#/components/responses/RateLimited'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      tags:
        - Files
      summary: Delete file
      description: Delete a file from the project
      security:
        - bearerAuth: []
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Project ID
        - name: fileId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: File ID
      responses:
        '200':
          description: Successfully deleted file
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "File deleted successfully"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # User Management Endpoints
  /users/profile:
    get:
      tags:
        - Users
      summary: Get user profile
      description: Retrieve the authenticated user's profile information
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successfully retrieved user profile
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

    put:
      tags:
        - Users
      summary: Update user profile
      description: Update the authenticated user's profile information
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProfileRequest'
      responses:
        '200':
          description: Successfully updated profile
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/settings:
    get:
      tags:
        - Users
      summary: Get user settings
      description: Retrieve the authenticated user's settings
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successfully retrieved user settings
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/UserSettings'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

    put:
      tags:
        - Users
      summary: Update user settings
      description: Update the authenticated user's settings
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSettingsRequest'
      responses:
        '200':
          description: Successfully updated settings
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/UserSettings'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalServerError'

# Components Section
components:
  schemas:
    # Base Schemas
    Project:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "550e8400-e29b-41d4-a716-446655440000"
        name:
          type: string
          example: "My E-commerce Site"
        description:
          type: string
          example: "A modern e-commerce website with React"
        prompt:
          type: string
          example: "Create an e-commerce site with product listings and cart"
        files:
          type: array
          items:
            $ref: '#/components/schemas/ProjectFile'
        messages:
          type: array
          items:
            $ref: '#/components/schemas/ChatMessage'
        metadata:
          $ref: '#/components/schemas/ProjectMetadata'
        settings:
          $ref: '#/components/schemas/ProjectSettings'
        status:
          $ref: '#/components/schemas/ProjectStatus'
        user_id:
          type: string
          format: uuid
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    ProjectFile:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: "index.html"
        type:
          $ref: '#/components/schemas/FileType'
        content:
          type: string
          example: "<html><body>Hello World</body></html>"
        language:
          type: string
          example: "html"
        path:
          type: string
          example: "/src/index.html"
        size:
          type: integer
          example: 1024
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    FileType:
      type: string
      enum:
        - html
        - css
        - javascript
        - typescript
        - jsx
        - tsx
        - json
        - md
        - txt
        - image
        - other

    ChatMessage:
      type: object
      properties:
        id:
          type: string
          format: uuid
        role:
          $ref: '#/components/schemas/MessageRole'
        content:
          type: string
          example: "Can you help me create a responsive navigation bar?"
        timestamp:
          type: string
          format: date-time
        metadata:
          $ref: '#/components/schemas/MessageMetadata'

    MessageRole:
      type: string
      enum:
        - user
        - assistant
        - system

    MessageMetadata:
      type: object
      properties:
        files:
          type: array
          items:
            $ref: '#/components/schemas/ProjectFile'
        operations:
          type: array
          items:
            $ref: '#/components/schemas/FileOperation'
        reasoning:
          type: string
        confidence:
          type: number
          minimum: 0
          maximum: 1

    FileOperation:
      type: object
      properties:
        type:
          type: string
          enum:
            - create
            - update
            - delete
            - move
        file:
          type: string
        content:
          type: string
        from:
          type: string
        to:
          type: string
        reason:
          type: string

    ProjectMetadata:
      type: object
      properties:
        architecture:
          $ref: '#/components/schemas/ProjectArchitecture'
        framework:
          $ref: '#/components/schemas/SupportedFramework'
        template:
          $ref: '#/components/schemas/ProjectTemplate'
        build_config:
          $ref: '#/components/schemas/ProjectBuildConfig'
        deployment:
          $ref: '#/components/schemas/DeploymentConfig'
        tags:
          type: array
          items:
            type: string
        last_modified:
          type: string
          format: date-time
        version:
          type: string
          example: "1.0.0"

    ProjectArchitecture:
      type: object
      properties:
        type:
          type: string
          enum:
            - single-page
            - multi-page
            - dashboard
            - e-commerce
            - portfolio
            - custom
        pages:
          type: array
          items:
            $ref: '#/components/schemas/PageConfig'
        routing:
          $ref: '#/components/schemas/RoutingConfig'
        components:
          type: array
          items:
            $ref: '#/components/schemas/ComponentConfig'

    PageConfig:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        path:
          type: string
        title:
          type: string
        description:
          type: string
        components:
          type: array
          items:
            type: string
        meta:
          type: object
          additionalProperties: true

    RoutingConfig:
      type: object
      properties:
        type:
          type: string
          enum:
            - client-side
            - server-side
            - static
        base_path:
          type: string
        routes:
          type: array
          items:
            $ref: '#/components/schemas/RouteConfig'

    RouteConfig:
      type: object
      properties:
        path:
          type: string
        component:
          type: string
        exact:
          type: boolean
        meta:
          type: object
          additionalProperties: true

    ComponentConfig:
      type: object
      properties:
        name:
          type: string
        type:
          type: string
          enum:
            - page
            - layout
            - ui
            - business
        props:
          type: object
          additionalProperties: true
        dependencies:
          type: array
          items:
            type: string

    SupportedFramework:
      type: string
      enum:
        - vanilla
        - react
        - vue
        - angular
        - svelte
        - preact
        - solid

    ProjectTemplate:
      type: string
      enum:
        - blank
        - dashboard
        - e-commerce
        - blog
        - portfolio
        - saas
        - landing-page
        - admin-panel
        - multi-page-app
        - cin7-sales
        - cin7-inventory
        - cin7-analytics
        - mobile-commerce

    ProjectBuildConfig:
      type: object
      properties:
        bundler:
          type: string
          enum:
            - vite
            - webpack
            - rollup
            - esbuild
        output_dir:
          type: string
        public_path:
          type: string
        minify:
          type: boolean
        sourcemap:
          type: boolean
        optimization:
          $ref: '#/components/schemas/BuildOptimization'

    BuildOptimization:
      type: object
      properties:
        split_chunks:
          type: boolean
        tree_shaking:
          type: boolean
        compression:
          type: boolean

    DeploymentConfig:
      type: object
      properties:
        platform:
          type: string
          enum:
            - netlify
            - vercel
            - github-pages
            - custom
        url:
          type: string
        environment:
          type: object
          additionalProperties:
            type: string
        build_command:
          type: string
        output_dir:
          type: string

    ProjectSettings:
      type: object
      properties:
        theme:
          $ref: '#/components/schemas/ThemeSettings'
        editor:
          $ref: '#/components/schemas/EditorSettings'
        preview:
          $ref: '#/components/schemas/PreviewSettings'
        ai:
          $ref: '#/components/schemas/AISettings'
        collaboration:
          $ref: '#/components/schemas/CollaborationSettings'

    ThemeSettings:
      type: object
      properties:
        mode:
          type: string
          enum:
            - light
            - dark
            - auto
        primary_color:
          type: string
        custom_css:
          type: string
        framework:
          type: string

    EditorSettings:
      type: object
      properties:
        tab_size:
          type: integer
          minimum: 1
          maximum: 8
        word_wrap:
          type: boolean
        minimap:
          type: boolean
        line_numbers:
          type: boolean
        font_size:
          type: integer
          minimum: 8
          maximum: 32
        theme:
          type: string

    PreviewSettings:
      type: object
      properties:
        auto_refresh:
          type: boolean
        device:
          $ref: '#/components/schemas/DeviceType'
        orientation:
          $ref: '#/components/schemas/OrientationType'
        size:
          $ref: '#/components/schemas/PreviewSize'

    DeviceType:
      type: string
      enum:
        - desktop
        - tablet
        - mobile

    OrientationType:
      type: string
      enum:
        - portrait
        - landscape

    PreviewSize:
      type: object
      properties:
        width:
          type: integer
          minimum: 100
        height:
          type: integer
          minimum: 100

    AISettings:
      type: object
      properties:
        model:
          type: string
        temperature:
          type: number
          minimum: 0
          maximum: 2
        max_tokens:
          type: integer
          minimum: 1
        context_window:
          type: integer
          minimum: 1
        auto_suggestions:
          type: boolean
        code_completion:
          type: boolean

    CollaborationSettings:
      type: object
      properties:
        real_time:
          type: boolean
        share_link:
          type: string
        permissions:
          type: array
          items:
            $ref: '#/components/schemas/PermissionConfig'

    PermissionConfig:
      type: object
      properties:
        user_id:
          type: string
          format: uuid
        role:
          type: string
          enum:
            - viewer
            - editor
            - admin
        granted_at:
          type: string
          format: date-time

    ProjectStatus:
      type: string
      enum:
        - draft
        - active
        - archived
        - deleted
        - building
        - deployed
        - error

    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        name:
          type: string
        avatar:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    UserSettings:
      type: object
      properties:
        theme:
          $ref: '#/components/schemas/ThemeSettings'
        notifications:
          type: object
          properties:
            email:
              type: boolean
            push:
              type: boolean
            project_updates:
              type: boolean
            ai_suggestions:
              type: boolean
        privacy:
          type: object
          properties:
            profile_visibility:
              type: string
              enum:
                - public
                - private
            share_projects:
              type: boolean
        preferences:
          type: object
          properties:
            language:
              type: string
            timezone:
              type: string
            auto_save:
              type: boolean

    AIModel:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        provider:
          type: string
        capabilities:
          type: array
          items:
            type: string
        max_tokens:
          type: integer
        cost_per_token:
          type: number
        available:
          type: boolean

    Pagination:
      type: object
      properties:
        page:
          type: integer
          minimum: 1
        limit:
          type: integer
          minimum: 1
        total:
          type: integer
          minimum: 0
        total_pages:
          type: integer
          minimum: 0
        has_next:
          type: boolean
        has_prev:
          type: boolean

    # Request Schemas
    CreateProjectRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        description:
          type: string
          maxLength: 500
        prompt:
          type: string
          maxLength: 2000
        template:
          $ref: '#/components/schemas/ProjectTemplate'
        framework:
          $ref: '#/components/schemas/SupportedFramework'
        settings:
          $ref: '#/components/schemas/ProjectSettings'

    UpdateProjectRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        description:
          type: string
          maxLength: 500
        prompt:
          type: string
          maxLength: 2000
        status:
          $ref: '#/components/schemas/ProjectStatus'
        metadata:
          $ref: '#/components/schemas/ProjectMetadata'
        settings:
          $ref: '#/components/schemas/ProjectSettings'

    GenerateRequest:
      type: object
      required:
        - prompt
      properties:
        prompt:
          type: string
          minLength: 1
          maxLength: 5000
        existing_files:
          type: array
          items:
            $ref: '#/components/schemas/ProjectFile'
        chat_history:
          type: array
          items:
            $ref: '#/components/schemas/ChatMessage'
        context:
          $ref: '#/components/schemas/RequestContext'
        options:
          $ref: '#/components/schemas/GenerateOptions'

    RequestContext:
      type: object
      properties:
        project_id:
          type: string
          format: uuid
        framework:
          $ref: '#/components/schemas/SupportedFramework'
        template:
          $ref: '#/components/schemas/ProjectTemplate'
        architecture:
          $ref: '#/components/schemas/ProjectArchitecture'
        constraints:
          type: array
          items:
            type: string
        examples:
          type: array
          items:
            $ref: '#/components/schemas/Example'

    Example:
      type: object
      properties:
        description:
          type: string
        code:
          type: string
        language:
          type: string

    GenerateOptions:
      type: object
      properties:
        temperature:
          type: number
          minimum: 0
          maximum: 2
        max_tokens:
          type: integer
          minimum: 1
        stream:
          type: boolean
        include_tests:
          type: boolean
        include_docs:
          type: boolean

    GenerateResponse:
      type: object
      properties:
        success:
          type: boolean
        files:
          type: array
          items:
            $ref: '#/components/schemas/ProjectFile'
        operations:
          type: array
          items:
            $ref: '#/components/schemas/FileOperation'
        reasoning:
          type: string
        confidence:
          type: number
          minimum: 0
          maximum: 1
        build_config:
          $ref: '#/components/schemas/ProjectBuildConfig'
        deployment_config:
          $ref: '#/components/schemas/DeploymentConfig'
        next_steps:
          type: array
          items:
            type: string
        warnings:
          type: array
          items:
            type: string

    ChatRequest:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          minLength: 1
          maxLength: 2000
        project_id:
          type: string
          format: uuid
        context:
          type: object
        stream:
          type: boolean
          default: false

    ChatResponse:
      type: object
      properties:
        message:
          type: string
        role:
          type: string
          enum:
            - assistant
        metadata:
          $ref: '#/components/schemas/MessageMetadata'
        suggestions:
          type: array
          items:
            type: string

    AnalyzeRequest:
      type: object
      required:
        - code
      properties:
        code:
          type: string
          minLength: 1
        file_path:
          type: string
        language:
          type: string
        analysis_type:
          type: string
          enum:
            - security
            - performance
            - quality
            - suggestions
            - all

    AnalyzeResponse:
      type: object
      properties:
        issues:
          type: array
          items:
            $ref: '#/components/schemas/Issue'
        suggestions:
          type: array
          items:
            $ref: '#/components/schemas/Suggestion'
        metrics:
          $ref: '#/components/schemas/CodeMetrics'
        summary:
          type: string

    Issue:
      type: object
      properties:
        type:
          type: string
          enum:
            - error
            - warning
            - info
        message:
          type: string
        line:
          type: integer
        column:
          type: integer
        severity:
          type: string
        fix_suggestion:
          type: string

    Suggestion:
      type: object
      properties:
        type:
          type: string
        description:
          type: string
        code:
          type: string
        impact:
          type: string

    CodeMetrics:
      type: object
      properties:
        complexity:
          type: number
        maintainability:
          type: string
        test_coverage:
          type: number
        performance_score:
          type: number

    CreateFileRequest:
      type: object
      required:
        - name
        - type
        - content
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 255
        type:
          $ref: '#/components/schemas/FileType'
        content:
          type: string
        path:
          type: string

    UpdateFileRequest:
      type: object
      required:
        - content
      properties:
        content:
          type: string
        name:
          type: string
          minLength: 1
          maxLength: 255

    UpdateProfileRequest:
      type: object
      properties:
        name:
          type: string
          maxLength: 100
        avatar:
          type: string

    UpdateSettingsRequest:
      type: object
      properties:
        theme:
          $ref: '#/components/schemas/ThemeSettings'
        notifications:
          type: object
        privacy:
          type: object
        preferences:
          type: object

    # Error Schemas
    ErrorResponse:
      type: object
      required:
        - success
        - error
      properties:
        success:
          type: boolean
          example: false
        error:
          type: string
        code:
          type: string
        details:
          type: object
          additionalProperties: true
        timestamp:
          type: string
          format: date-time

  # Security Schemes
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "JWT token from Supabase authentication"

  # Reusable Responses
  responses:
    BadRequest:
      description: Bad request - invalid input parameters
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            error: "Invalid request parameters"
            code: "BAD_REQUEST"

    Unauthorized:
      description: Unauthorized - authentication required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            error: "Authentication required"
            code: "UNAUTHORIZED"

    Forbidden:
      description: Forbidden - insufficient permissions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            error: "Insufficient permissions"
            code: "FORBIDDEN"

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            error: "Resource not found"
            code: "NOT_FOUND"

    ValidationError:
      description: Validation error - invalid input data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            error: "Validation failed"
            code: "VALIDATION_ERROR"
            details:
              field: "name"
              message: "Name is required"

    RateLimited:
      description: Too many requests - rate limit exceeded
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            error: "Rate limit exceeded"
            code: "RATE_LIMITED"
            details:
              retry_after: 60

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            error: "Internal server error"
            code: "INTERNAL_SERVER_ERROR"

  # Parameters
  parameters:
    ProjectId:
      name: projectId
      in: path
      required: true
      schema:
        type: string
        format: uuid
      description: Project ID

    FileId:
      name: fileId
      in: path
      required: true
      schema:
        type: string
        format: uuid
      description: File ID

    Page:
      name: page
      in: query
      schema:
        type: integer
        default: 1
        minimum: 1
      description: Page number for pagination

    Limit:
      name: limit
      in: query
      schema:
        type: integer
        default: 20
        minimum: 1
        maximum: 100
      description: Number of items per page

# Security Configuration
security:
  - bearerAuth: []